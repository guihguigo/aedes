(function() {
  angular.module('aedes').controller('ChartRegionalController', function($scope, ChartService, ChartsService, UtilsService) {
    'ngInject';
    var hideChart, showChart, vm;
    vm = this;
    this.methods = $scope.methods = {};
    $scope.dataModel = {
      visual: {},
      metaData: {},
      data: {},
      options: {}
    };
    showChart = function() {
      return $scope.loader = false;
    };
    hideChart = function() {
      return $scope.loader = true;
    };
    $scope.methods.showRegiaoChart = function() {
      hideChart();
      return ChartsService.getPrevencoesRegionais().then(function(response) {
        var DataTable, mappedRows;
        mappedRows = UtilsService.objectToArray(response.data);
        $scope.localidades = response.data;
        DataTable = new google.visualization.DataTable();
        DataTable.addColumn('string', 'States');
        DataTable.addColumn('number', 'Em dias');
        DataTable.addColumn('number', 'Atrasadas');
        DataTable.addRows(mappedRows);
        $scope.dataModel.data = DataTable;
        $scope.dataModel.options = {
          'width': 500,
          'height': 300,
          region: 'BR',
          resolution: 'provinces',
          displayMode: 'regions',
          colorAxis: {
            colors: ['red', 'blue']
          }
        };
        $scope.percentChartHeader = "Estados mais afestos";
        return showChart();
      }, function(error) {
        return console.log('FAIO');
      });
    };
    $scope.methods.showCityChart = function() {
      hideChart();
      return ChartsService.getPrevencoesEmCidades().then(function(response) {
        var header, mappedRows;
        header = new Array(['City', 'Em dia', 'Atrasada']);
        mappedRows = UtilsService.objectToArray(response.data);
        mappedRows = _.union(header, mappedRows);
        $scope.localidades = response.data;
        $scope.dataModel.data = new google.visualization.arrayToDataTable(mappedRows);
        $scope.dataModel.options = {
          sizeAxis: {
            minValue: 0,
            maxValue: 100
          },
          region: 'BR',
          displayMode: 'markers',
          colorAxis: {
            colors: ['red', 'blue']
          },
          'width': 500,
          'height': 300
        };
        $scope.percentChartHeader = "Cidades mais afestas";
        return showChart();
      }, function(error) {
        throw error;
      });
    };
    $scope.methods.showRegiaoChart();
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZlYXR1cmVzL2NoYXJ0cy9yZWdpb25hbC9jaGFydC5jb250cm9sbGVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBLE9BQU8sQ0FBQyxNQUFSLENBQWUsT0FBZixDQUNFLENBQUMsVUFESCxDQUNjLHlCQURkLEVBQ3lDLFNBQUMsTUFBRCxFQUFTLFlBQVQsRUFBdUIsYUFBdkIsRUFBc0MsWUFBdEM7SUFDckM7QUFBQSxRQUFBO0lBRUEsRUFBQSxHQUFLO0lBQ0wsSUFBQyxDQUFBLE9BQUQsR0FBVyxNQUFNLENBQUMsT0FBUCxHQUFpQjtJQUs1QixNQUFNLENBQUMsU0FBUCxHQUFtQjtNQUNqQixNQUFBLEVBQVEsRUFEUztNQUVqQixRQUFBLEVBQVUsRUFGTztNQUdqQixJQUFBLEVBQU0sRUFIVztNQUlqQixPQUFBLEVBQVMsRUFKUTs7SUFPbkIsU0FBQSxHQUFZLFNBQUE7YUFDVixNQUFNLENBQUMsTUFBUCxHQUFnQjtJQUROO0lBR1osU0FBQSxHQUFZLFNBQUE7YUFDVixNQUFNLENBQUMsTUFBUCxHQUFnQjtJQUROO0lBR1osTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFmLEdBQWlDLFNBQUE7TUFJNUIsU0FBSCxDQUFBO2FBRUEsYUFBYSxDQUFDLHNCQUFkLENBQUEsQ0FBc0MsQ0FBQyxJQUF2QyxDQUNFLFNBQUMsUUFBRDtBQUNFLFlBQUE7UUFBQSxVQUFBLEdBQWEsWUFBWSxDQUFDLGFBQWIsQ0FBMkIsUUFBUSxDQUFDLElBQXBDO1FBRWIsU0FBQSxHQUFnQixJQUFBLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBckIsQ0FBQTtRQUNoQixTQUFTLENBQUMsU0FBVixDQUFvQixRQUFwQixFQUE4QixRQUE5QjtRQUNBLFNBQVMsQ0FBQyxTQUFWLENBQW9CLFFBQXBCLEVBQThCLFNBQTlCO1FBQ0EsU0FBUyxDQUFDLFNBQVYsQ0FBb0IsUUFBcEIsRUFBOEIsV0FBOUI7UUFDQSxTQUFTLENBQUMsT0FBVixDQUFrQixVQUFsQjtRQUVBLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBakIsR0FBd0I7UUFFeEIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFqQixHQUNFO1VBQUEsT0FBQSxFQUFTLEdBQVQ7VUFDQSxRQUFBLEVBQVUsR0FEVjtVQUVBLE1BQUEsRUFBUSxJQUZSO1VBR0EsVUFBQSxFQUFZLFdBSFo7VUFJQSxXQUFBLEVBQWEsU0FKYjtVQUtBLFNBQUEsRUFDRTtZQUFBLE1BQUEsRUFBUSxDQUFDLEtBQUQsRUFBUSxNQUFSLENBQVI7V0FORjs7ZUFRQyxTQUFILENBQUE7TUFwQkYsQ0FERixFQXVCRSxDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUMsS0FBRDtpQkFDRSxPQUFPLENBQUMsR0FBUixDQUFZLE1BQVo7UUFERjtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0F2QkY7SUFOK0I7SUFpQ2pDLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBZixHQUFpQyxTQUFBO01BSTVCLFNBQUgsQ0FBQTtNQUVBLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBakIsR0FBNEIsSUFBQSxNQUFNLENBQUMsYUFBYSxDQUFDLGdCQUFyQixDQUFzQyxDQUNoRSxDQUFDLE1BQUQsRUFBUyxRQUFULEVBQW1CLFVBQW5CLENBRGdFLEVBRWhFLENBQUMsY0FBRCxFQUFpQixNQUFqQixFQUF5QixDQUF6QixDQUZnRSxFQUdoRSxDQUFDLFFBQUQsRUFBVyxLQUFYLEVBQWtCLEtBQWxCLENBSGdFLEVBSWhFLENBQUMsU0FBRCxFQUFZLEtBQVosRUFBbUIsS0FBbkIsQ0FKZ0UsRUFLaEUsQ0FBQyxTQUFELEVBQVksQ0FBWixFQUFlLE1BQWYsQ0FMZ0UsRUFNaEUsQ0FBQyxhQUFELEVBQWdCLEtBQWhCLEVBQXVCLEtBQXZCLENBTmdFLEVBT2hFLENBQUMsU0FBRCxFQUFZLEtBQVosRUFBbUIsS0FBbkIsQ0FQZ0UsRUFRaEUsQ0FBQyxVQUFELEVBQWEsS0FBYixFQUFvQixJQUFwQixDQVJnRSxFQVNoRSxDQUFDLFlBQUQsRUFBZSxLQUFmLEVBQXNCLEtBQXRCLENBVGdFLENBQXRDO01BWTVCLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBakIsR0FDRTtRQUFBLFFBQUEsRUFBVTtVQUFDLFFBQUEsRUFBVSxDQUFYO1VBQWMsUUFBQSxFQUFVLEdBQXhCO1NBQVY7UUFDQSxNQUFBLEVBQVEsSUFEUjtRQUVBLFdBQUEsRUFBYSxTQUZiO1FBR0EsU0FBQSxFQUFXO1VBQUMsTUFBQSxFQUFRLENBQUMsS0FBRCxFQUFRLE1BQVIsQ0FBVDtTQUhYO1FBSUEsT0FBQSxFQUFTLEdBSlQ7UUFLQSxRQUFBLEVBQVUsR0FMVjs7YUFPQyxTQUFILENBQUE7SUExQitCO0lBNEI5QixNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWxCLENBQUE7RUFuRnFDLENBRHpDO0FBQUEiLCJmaWxlIjoiZmVhdHVyZXMvY2hhcnRzL3JlZ2lvbmFsL2NoYXJ0LmNvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSAnYWVkZXMnXG4gIC5jb250cm9sbGVyICdDaGFydFJlZ2lvbmFsQ29udHJvbGxlcicsICgkc2NvcGUsIENoYXJ0U2VydmljZSwgQ2hhcnRzU2VydmljZSwgVXRpbHNTZXJ2aWNlKSAtPlxuICAgICduZ0luamVjdCdcblxuICAgIHZtID0gdGhpc1xuICAgIEBtZXRob2RzID0gJHNjb3BlLm1ldGhvZHMgPSB7fVxuXG4gICAgI1RoaXMgaXMgd2hlcmUgbXkgZGF0YSBtb2RlbCB3aWxsIGJlIHN0b3JlZC5cbiAgICAjXCJ2aXN1YWxcIiB3aWxsIGNvbnRhaW4gdGhlIGNoYXJ0J3MgZGF0YXRhYmxlLFxuICAgICNcImFjdGl2YXRlQ2hhcnRcIiBmbGlwcyB0byB0cnVlIG9uY2UgdGhlIGRhdGEgZnJvbSBzZXJ2ZXIgaXMgcmVhZHlcbiAgICAkc2NvcGUuZGF0YU1vZGVsID0ge1xuICAgICAgdmlzdWFsOiB7fVxuICAgICAgbWV0YURhdGE6IHt9XG4gICAgICBkYXRhOiB7fVxuICAgICAgb3B0aW9uczoge31cbiAgICB9XG5cbiAgICBzaG93Q2hhcnQgPSAtPlxuICAgICAgJHNjb3BlLmxvYWRlciA9IGZhbHNlXG5cbiAgICBoaWRlQ2hhcnQgPSAtPlxuICAgICAgJHNjb3BlLmxvYWRlciA9IHRydWVcblxuICAgICRzY29wZS5tZXRob2RzLnNob3dSZWdpYW9DaGFydCA9IC0+XG4gICAgICAjVXBkYXRlIHRoZSBtb2RlbCB0byBhY3RpdmF0ZSB0aGUgY2hhcnQgb24gdGhlIERPTVxuICAgICAgI05vdGUgdGhlIHVzZSBvZiAkc2NvcGUuJGFwcGx5IHNpbmNlIHdlJ3JlIGluIHRoZVxuICAgICAgI0dvb2dsZSBMb2FkZXIgY2FsbGJhY2suXG4gICAgICBkbyBoaWRlQ2hhcnRcblxuICAgICAgQ2hhcnRzU2VydmljZS5nZXRQcmV2ZW5jb2VzUmVnaW9uYWlzKCkudGhlbihcbiAgICAgICAgKHJlc3BvbnNlKSAtPlxuICAgICAgICAgIG1hcHBlZFJvd3MgPSBVdGlsc1NlcnZpY2Uub2JqZWN0VG9BcnJheSByZXNwb25zZS5kYXRhXG5cbiAgICAgICAgICBEYXRhVGFibGUgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uRGF0YVRhYmxlKClcbiAgICAgICAgICBEYXRhVGFibGUuYWRkQ29sdW1uICdzdHJpbmcnLCAnU3RhdGVzJ1xuICAgICAgICAgIERhdGFUYWJsZS5hZGRDb2x1bW4gJ251bWJlcicsICdFbSBkaWFzJ1xuICAgICAgICAgIERhdGFUYWJsZS5hZGRDb2x1bW4gJ251bWJlcicsICdBdHJhc2FkYXMnXG4gICAgICAgICAgRGF0YVRhYmxlLmFkZFJvd3MgbWFwcGVkUm93c1xuXG4gICAgICAgICAgJHNjb3BlLmRhdGFNb2RlbC5kYXRhID0gRGF0YVRhYmxlXG5cbiAgICAgICAgICAkc2NvcGUuZGF0YU1vZGVsLm9wdGlvbnMgPVxuICAgICAgICAgICAgJ3dpZHRoJzogNTAwXG4gICAgICAgICAgICAnaGVpZ2h0JzogMzAwXG4gICAgICAgICAgICByZWdpb246ICdCUidcbiAgICAgICAgICAgIHJlc29sdXRpb246ICdwcm92aW5jZXMnXG4gICAgICAgICAgICBkaXNwbGF5TW9kZTogJ3JlZ2lvbnMnXG4gICAgICAgICAgICBjb2xvckF4aXM6XG4gICAgICAgICAgICAgIGNvbG9yczogWydyZWQnLCAnYmx1ZSddXG5cbiAgICAgICAgICBkbyBzaG93Q2hhcnRcblxuICAgICAgICAoZXJyb3IpID0+XG4gICAgICAgICAgY29uc29sZS5sb2cgJ0ZBSU8nXG4gICAgICApXG5cbiAgICAkc2NvcGUubWV0aG9kcy5zaG93Q2l0eUNoYXJ0ICAgPSAtPlxuICAgICAgI1VwZGF0ZSB0aGUgbW9kZWwgdG8gYWN0aXZhdGUgdGhlIGNoYXJ0IG9uIHRoZSBET01cbiAgICAgICNOb3RlIHRoZSB1c2Ugb2YgJHNjb3BlLiRhcHBseSBzaW5jZSB3ZSdyZSBpbiB0aGVcbiAgICAgICNHb29nbGUgTG9hZGVyIGNhbGxiYWNrLlxuICAgICAgZG8gaGlkZUNoYXJ0XG5cbiAgICAgICRzY29wZS5kYXRhTW9kZWwuZGF0YSA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5hcnJheVRvRGF0YVRhYmxlKFtcbiAgICAgICAgWydDaXR5JywgJ0VtIGRpYScsICdBdHJhc2FkYSddLFxuICAgICAgICBbJ1ByYWlhIEdyYW5kZScsIDEwMC4wMCwgMF0sXG4gICAgICAgIFsnU2FudG9zJywgMjUuNzUsIDc0LjI1XSxcbiAgICAgICAgWydDdWJhdMOjbycsIDEwLjAwLCA5MC4wMF0sXG4gICAgICAgIFsnUHJldcOtYmUnLCAwLCAxMDAuMDBdLFxuICAgICAgICBbJ1PDo28gVmljZW50ZScsIDUwLjAwLCA1MC4wMF0sXG4gICAgICAgIFsnR3VhcnVqw6EnLCA4MC4yNSwgMTkuNzVdLFxuICAgICAgICBbJ01vbmdhZ3XDoScsIDk1LjAwLCA1LjAwXSxcbiAgICAgICAgWydJdGFnZW5oYWVtJywgODAuMDAsIDIwLjAwXVxuICAgICAgXSlcblxuICAgICAgJHNjb3BlLmRhdGFNb2RlbC5vcHRpb25zID1cbiAgICAgICAgc2l6ZUF4aXM6IHttaW5WYWx1ZTogMCwgbWF4VmFsdWU6IDEwMH1cbiAgICAgICAgcmVnaW9uOiAnQlInXG4gICAgICAgIGRpc3BsYXlNb2RlOiAnbWFya2VycydcbiAgICAgICAgY29sb3JBeGlzOiB7Y29sb3JzOiBbJ3JlZCcsICdibHVlJ119XG4gICAgICAgICd3aWR0aCc6IDUwMFxuICAgICAgICAnaGVpZ2h0JzogMzAwXG5cbiAgICAgIGRvIHNob3dDaGFydFxuXG4gICAgZG8gJHNjb3BlLm1ldGhvZHMuc2hvd1JlZ2lhb0NoYXJ0XG5cbiAgICByZXR1cm5cbiJdfQ==
