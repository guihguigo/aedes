(function() {
  angular.module('aedes').controller('ChartRegionalController', function($scope, ChartService, ChartsService, UtilsService) {
    'ngInject';
    var Chart, hideChart, setChart, showChart, vm;
    vm = this;
    Chart = null;
    this.methods = $scope.methods = {};
    $scope.dataModel = {
      visual: {},
      metaData: {},
      data: {},
      options: {}
    };
    showChart = function() {
      return $scope.loader = false;
    };
    hideChart = function() {
      return $scope.loader = true;
    };
    setChart = function(chart) {
      return Chart = chart;
    };
    $scope.methods.showRegiaoChart = function() {
      hideChart();
      return ChartsService.getPrevencoesRegionais().then(function(response) {
        var DataTable, mappedRows;
        mappedRows = UtilsService.objectToArray(response.data);
        $scope.localidades = response.data;
        DataTable = new google.visualization.DataTable();
        DataTable.addColumn('string', 'States');
        DataTable.addColumn('number', 'Em dias');
        DataTable.addColumn('number', 'Atrasadas');
        DataTable.addRows(mappedRows);
        $scope.dataModel.data = DataTable;
        $scope.dataModel.setChart = setChart;
        $scope.dataModel.options = {
          'width': 500,
          'height': 300,
          region: 'BR',
          resolution: 'provinces',
          displayMode: 'regions',
          colorAxis: {
            colors: ['red', 'blue']
          }
        };
        $scope.percentChartHeader = "Estados mais afestos";
        return showChart();
      }, function(error) {
        return console.log('FAIO');
      });
    };
    $scope.methods.showCityChart = function() {
      hideChart();
      return ChartsService.getPrevencoesEmCidades().then(function(response) {
        var header, mappedRows;
        header = new Array(['City', 'Em dia', 'Atrasada']);
        mappedRows = UtilsService.objectToArray(response.data);
        mappedRows = _.union(header, mappedRows);
        $scope.localidades = response.data;
        $scope.dataModel.data = new google.visualization.arrayToDataTable(mappedRows);
        $scope.dataModel.options = {
          sizeAxis: {
            minValue: 0,
            maxValue: 100
          },
          region: 'BR',
          displayMode: 'markers',
          colorAxis: {
            colors: ['red', 'blue']
          },
          'width': 500,
          'height': 300
        };
        $scope.percentChartHeader = "Cidades mais afestas";
        return showChart();
      }, function(error) {
        throw error;
      });
    };
    $scope.methods.showRegiaoChart();
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZlYXR1cmVzL2NoYXJ0cy9yZWdpb25hbC9jaGFydC5jb250cm9sbGVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBLE9BQU8sQ0FBQyxNQUFSLENBQWUsT0FBZixDQUNFLENBQUMsVUFESCxDQUNjLHlCQURkLEVBQ3lDLFNBQUMsTUFBRCxFQUFTLFlBQVQsRUFBdUIsYUFBdkIsRUFBc0MsWUFBdEM7SUFDckM7QUFBQSxRQUFBO0lBRUEsRUFBQSxHQUFLO0lBQ0wsS0FBQSxHQUFRO0lBRVIsSUFBQyxDQUFBLE9BQUQsR0FBVyxNQUFNLENBQUMsT0FBUCxHQUFpQjtJQUs1QixNQUFNLENBQUMsU0FBUCxHQUFtQjtNQUNqQixNQUFBLEVBQVEsRUFEUztNQUVqQixRQUFBLEVBQVUsRUFGTztNQUdqQixJQUFBLEVBQU0sRUFIVztNQUlqQixPQUFBLEVBQVMsRUFKUTs7SUFPbkIsU0FBQSxHQUFZLFNBQUE7YUFDVixNQUFNLENBQUMsTUFBUCxHQUFnQjtJQUROO0lBR1osU0FBQSxHQUFZLFNBQUE7YUFDVixNQUFNLENBQUMsTUFBUCxHQUFnQjtJQUROO0lBR1osUUFBQSxHQUFXLFNBQUMsS0FBRDthQUNULEtBQUEsR0FBUTtJQURDO0lBR1gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFmLEdBQWlDLFNBQUE7TUFJNUIsU0FBSCxDQUFBO2FBRUEsYUFBYSxDQUFDLHNCQUFkLENBQUEsQ0FBc0MsQ0FBQyxJQUF2QyxDQUNFLFNBQUMsUUFBRDtBQUNFLFlBQUE7UUFBQSxVQUFBLEdBQWEsWUFBWSxDQUFDLGFBQWIsQ0FBMkIsUUFBUSxDQUFDLElBQXBDO1FBRWIsTUFBTSxDQUFDLFdBQVAsR0FBcUIsUUFBUSxDQUFDO1FBRTlCLFNBQUEsR0FBZ0IsSUFBQSxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQXJCLENBQUE7UUFDaEIsU0FBUyxDQUFDLFNBQVYsQ0FBb0IsUUFBcEIsRUFBOEIsUUFBOUI7UUFDQSxTQUFTLENBQUMsU0FBVixDQUFvQixRQUFwQixFQUE4QixTQUE5QjtRQUNBLFNBQVMsQ0FBQyxTQUFWLENBQW9CLFFBQXBCLEVBQThCLFdBQTlCO1FBQ0EsU0FBUyxDQUFDLE9BQVYsQ0FBa0IsVUFBbEI7UUFFQSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQWpCLEdBQXdCO1FBQ3hCLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBakIsR0FBNEI7UUFFNUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFqQixHQUNFO1VBQUEsT0FBQSxFQUFTLEdBQVQ7VUFDQSxRQUFBLEVBQVUsR0FEVjtVQUVBLE1BQUEsRUFBUSxJQUZSO1VBR0EsVUFBQSxFQUFZLFdBSFo7VUFJQSxXQUFBLEVBQWEsU0FKYjtVQUtBLFNBQUEsRUFDRTtZQUFBLE1BQUEsRUFBUSxDQUFDLEtBQUQsRUFBUSxNQUFSLENBQVI7V0FORjs7UUFRRixNQUFNLENBQUMsa0JBQVAsR0FBNEI7ZUFFekIsU0FBSCxDQUFBO01BekJGLENBREYsRUE0QkUsU0FBQyxLQUFEO2VBQ0UsT0FBTyxDQUFDLEdBQVIsQ0FBWSxNQUFaO01BREYsQ0E1QkY7SUFOK0I7SUFzQ2pDLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBZixHQUFpQyxTQUFBO01BSTVCLFNBQUgsQ0FBQTthQUVBLGFBQWEsQ0FBQyxzQkFBZCxDQUFBLENBQXNDLENBQUMsSUFBdkMsQ0FDRSxTQUFDLFFBQUQ7QUFDRSxZQUFBO1FBQUEsTUFBQSxHQUFpQixJQUFBLEtBQUEsQ0FBTSxDQUFDLE1BQUQsRUFBUyxRQUFULEVBQW1CLFVBQW5CLENBQU47UUFDakIsVUFBQSxHQUFhLFlBQVksQ0FBQyxhQUFiLENBQTJCLFFBQVEsQ0FBQyxJQUFwQztRQUNiLFVBQUEsR0FBYSxDQUFDLENBQUMsS0FBRixDQUFRLE1BQVIsRUFBZ0IsVUFBaEI7UUFFYixNQUFNLENBQUMsV0FBUCxHQUFxQixRQUFRLENBQUM7UUFDOUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFqQixHQUE0QixJQUFBLE1BQU0sQ0FBQyxhQUFhLENBQUMsZ0JBQXJCLENBQXNDLFVBQXRDO1FBRTVCLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBakIsR0FDRTtVQUFBLFFBQUEsRUFBVTtZQUFDLFFBQUEsRUFBVSxDQUFYO1lBQWMsUUFBQSxFQUFVLEdBQXhCO1dBQVY7VUFDQSxNQUFBLEVBQVEsSUFEUjtVQUVBLFdBQUEsRUFBYSxTQUZiO1VBR0EsU0FBQSxFQUFXO1lBQUMsTUFBQSxFQUFRLENBQUMsS0FBRCxFQUFRLE1BQVIsQ0FBVDtXQUhYO1VBSUEsT0FBQSxFQUFTLEdBSlQ7VUFLQSxRQUFBLEVBQVUsR0FMVjs7UUFPRixNQUFNLENBQUMsa0JBQVAsR0FBNEI7ZUFFekIsU0FBSCxDQUFBO01BbEJGLENBREYsRUFxQkUsU0FBQyxLQUFEO0FBQ0UsY0FBTTtNQURSLENBckJGO0lBTitCO0lBK0I5QixNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWxCLENBQUE7RUFoR3FDLENBRHpDO0FBQUEiLCJmaWxlIjoiZmVhdHVyZXMvY2hhcnRzL3JlZ2lvbmFsL2NoYXJ0LmNvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSAnYWVkZXMnXG4gIC5jb250cm9sbGVyICdDaGFydFJlZ2lvbmFsQ29udHJvbGxlcicsICgkc2NvcGUsIENoYXJ0U2VydmljZSwgQ2hhcnRzU2VydmljZSwgVXRpbHNTZXJ2aWNlKSAtPlxuICAgICduZ0luamVjdCdcblxuICAgIHZtID0gdGhpc1xuICAgIENoYXJ0ID0gbnVsbFxuXG4gICAgQG1ldGhvZHMgPSAkc2NvcGUubWV0aG9kcyA9IHt9XG5cbiAgICAjVGhpcyBpcyB3aGVyZSBteSBkYXRhIG1vZGVsIHdpbGwgYmUgc3RvcmVkLlxuICAgICNcInZpc3VhbFwiIHdpbGwgY29udGFpbiB0aGUgY2hhcnQncyBkYXRhdGFibGUsXG4gICAgI1wiYWN0aXZhdGVDaGFydFwiIGZsaXBzIHRvIHRydWUgb25jZSB0aGUgZGF0YSBmcm9tIHNlcnZlciBpcyByZWFkeVxuICAgICRzY29wZS5kYXRhTW9kZWwgPSB7XG4gICAgICB2aXN1YWw6IHt9XG4gICAgICBtZXRhRGF0YToge31cbiAgICAgIGRhdGE6IHt9XG4gICAgICBvcHRpb25zOiB7fVxuICAgIH1cblxuICAgIHNob3dDaGFydCA9IC0+XG4gICAgICAkc2NvcGUubG9hZGVyID0gZmFsc2VcblxuICAgIGhpZGVDaGFydCA9IC0+XG4gICAgICAkc2NvcGUubG9hZGVyID0gdHJ1ZVxuXG4gICAgc2V0Q2hhcnQgPSAoY2hhcnQpIC0+XG4gICAgICBDaGFydCA9IGNoYXJ0XG5cbiAgICAkc2NvcGUubWV0aG9kcy5zaG93UmVnaWFvQ2hhcnQgPSAtPlxuICAgICAgI1VwZGF0ZSB0aGUgbW9kZWwgdG8gYWN0aXZhdGUgdGhlIGNoYXJ0IG9uIHRoZSBET01cbiAgICAgICNOb3RlIHRoZSB1c2Ugb2YgJHNjb3BlLiRhcHBseSBzaW5jZSB3ZSdyZSBpbiB0aGVcbiAgICAgICNHb29nbGUgTG9hZGVyIGNhbGxiYWNrLlxuICAgICAgZG8gaGlkZUNoYXJ0XG5cbiAgICAgIENoYXJ0c1NlcnZpY2UuZ2V0UHJldmVuY29lc1JlZ2lvbmFpcygpLnRoZW4oXG4gICAgICAgIChyZXNwb25zZSkgLT5cbiAgICAgICAgICBtYXBwZWRSb3dzID0gVXRpbHNTZXJ2aWNlLm9iamVjdFRvQXJyYXkgcmVzcG9uc2UuZGF0YVxuXG4gICAgICAgICAgJHNjb3BlLmxvY2FsaWRhZGVzID0gcmVzcG9uc2UuZGF0YVxuXG4gICAgICAgICAgRGF0YVRhYmxlID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkRhdGFUYWJsZSgpXG4gICAgICAgICAgRGF0YVRhYmxlLmFkZENvbHVtbiAnc3RyaW5nJywgJ1N0YXRlcydcbiAgICAgICAgICBEYXRhVGFibGUuYWRkQ29sdW1uICdudW1iZXInLCAnRW0gZGlhcydcbiAgICAgICAgICBEYXRhVGFibGUuYWRkQ29sdW1uICdudW1iZXInLCAnQXRyYXNhZGFzJ1xuICAgICAgICAgIERhdGFUYWJsZS5hZGRSb3dzIG1hcHBlZFJvd3NcblxuICAgICAgICAgICRzY29wZS5kYXRhTW9kZWwuZGF0YSA9IERhdGFUYWJsZVxuICAgICAgICAgICRzY29wZS5kYXRhTW9kZWwuc2V0Q2hhcnQgPSBzZXRDaGFydFxuXG4gICAgICAgICAgJHNjb3BlLmRhdGFNb2RlbC5vcHRpb25zID1cbiAgICAgICAgICAgICd3aWR0aCc6IDUwMFxuICAgICAgICAgICAgJ2hlaWdodCc6IDMwMFxuICAgICAgICAgICAgcmVnaW9uOiAnQlInXG4gICAgICAgICAgICByZXNvbHV0aW9uOiAncHJvdmluY2VzJ1xuICAgICAgICAgICAgZGlzcGxheU1vZGU6ICdyZWdpb25zJ1xuICAgICAgICAgICAgY29sb3JBeGlzOlxuICAgICAgICAgICAgICBjb2xvcnM6IFsncmVkJywgJ2JsdWUnXVxuXG4gICAgICAgICAgJHNjb3BlLnBlcmNlbnRDaGFydEhlYWRlciA9IFwiRXN0YWRvcyBtYWlzIGFmZXN0b3NcIlxuXG4gICAgICAgICAgZG8gc2hvd0NoYXJ0XG5cbiAgICAgICAgKGVycm9yKSAtPlxuICAgICAgICAgIGNvbnNvbGUubG9nICdGQUlPJ1xuICAgICAgKVxuXG4gICAgJHNjb3BlLm1ldGhvZHMuc2hvd0NpdHlDaGFydCAgID0gLT5cbiAgICAgICNVcGRhdGUgdGhlIG1vZGVsIHRvIGFjdGl2YXRlIHRoZSBjaGFydCBvbiB0aGUgRE9NXG4gICAgICAjTm90ZSB0aGUgdXNlIG9mICRzY29wZS4kYXBwbHkgc2luY2Ugd2UncmUgaW4gdGhlXG4gICAgICAjR29vZ2xlIExvYWRlciBjYWxsYmFjay5cbiAgICAgIGRvIGhpZGVDaGFydFxuXG4gICAgICBDaGFydHNTZXJ2aWNlLmdldFByZXZlbmNvZXNFbUNpZGFkZXMoKS50aGVuKFxuICAgICAgICAocmVzcG9uc2UpIC0+XG4gICAgICAgICAgaGVhZGVyICAgICA9IG5ldyBBcnJheShbJ0NpdHknLCAnRW0gZGlhJywgJ0F0cmFzYWRhJ10pXG4gICAgICAgICAgbWFwcGVkUm93cyA9IFV0aWxzU2VydmljZS5vYmplY3RUb0FycmF5IHJlc3BvbnNlLmRhdGFcbiAgICAgICAgICBtYXBwZWRSb3dzID0gXy51bmlvbiBoZWFkZXIsIG1hcHBlZFJvd3NcblxuICAgICAgICAgICRzY29wZS5sb2NhbGlkYWRlcyA9IHJlc3BvbnNlLmRhdGFcbiAgICAgICAgICAkc2NvcGUuZGF0YU1vZGVsLmRhdGEgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uYXJyYXlUb0RhdGFUYWJsZShtYXBwZWRSb3dzKVxuXG4gICAgICAgICAgJHNjb3BlLmRhdGFNb2RlbC5vcHRpb25zID1cbiAgICAgICAgICAgIHNpemVBeGlzOiB7bWluVmFsdWU6IDAsIG1heFZhbHVlOiAxMDB9XG4gICAgICAgICAgICByZWdpb246ICdCUidcbiAgICAgICAgICAgIGRpc3BsYXlNb2RlOiAnbWFya2VycydcbiAgICAgICAgICAgIGNvbG9yQXhpczoge2NvbG9yczogWydyZWQnLCAnYmx1ZSddfVxuICAgICAgICAgICAgJ3dpZHRoJzogNTAwXG4gICAgICAgICAgICAnaGVpZ2h0JzogMzAwXG5cbiAgICAgICAgICAkc2NvcGUucGVyY2VudENoYXJ0SGVhZGVyID0gXCJDaWRhZGVzIG1haXMgYWZlc3Rhc1wiXG5cbiAgICAgICAgICBkbyBzaG93Q2hhcnRcblxuICAgICAgICAoZXJyb3IpIC0+XG4gICAgICAgICAgdGhyb3cgZXJyb3JcbiAgICAgIClcblxuICAgIGRvICRzY29wZS5tZXRob2RzLnNob3dSZWdpYW9DaGFydFxuXG4gICAgcmV0dXJuXG4iXX0=