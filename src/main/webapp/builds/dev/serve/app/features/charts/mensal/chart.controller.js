(function() {
  angular.module('aedes').controller('ChartMensalController', function($scope, $timeout, moment, ChartsService, UtilsService, EnderecoService) {
    'ngInject';
    var Chart, hideChart, initMaterialSelect, ngAutocompleteConfig, setEvents, showChart, vm;
    vm = this;
    Chart = null;
    this.methods = $scope.methods = {};
    this.attrs = $scope.attrs = {};
    this.attrs.focos = $scope.$parent.focos;
    this.attrs.fields = {
      focoId: '1'
    };
    ngAutocompleteConfig = function() {
      $scope.localidade = '';
      return $scope.options = {
        country: 'br'
      };
    };
    ngAutocompleteConfig();
    showChart = function() {
      return $scope.loader = false;
    };
    hideChart = function() {
      return $scope.loader = true;
    };
    initMaterialSelect = function() {
      return $timeout(function() {
        return $('[ui-view="mensal"] select').material_select();
      }, 100);
    };
    $scope.methods.showMensalChart = (function(_this) {
      return function() {
        hideChart();
        return ChartsService.getPrevencoesMensais(_this.attrs.fields).then(function(response) {
          var chart, dataTable, mappedRows, options;
          mappedRows = UtilsService.objectToArray(response.data);
          _.each(mappedRows, function(row) {
            return row[0] = UtilsService.getMonthPTBR(row[0]);
          });
          dataTable = new google.visualization.DataTable();
          dataTable.addColumn('string', 'Mês');
          dataTable.addColumn('number', 'Em dia');
          dataTable.addColumn('number', 'Atrasadas');
          dataTable.addRows(mappedRows);
          options = {
            width: 650,
            height: 300,
            chart: {
              title: mappedRows.length > 1 ? "Percentual dos últimos " + mappedRows.length + " meses" : "Percentual do último mês",
              subtitle: "Em dia e atrasadas: " + (moment().get('year'))
            }
          };
          chart = new google.charts.Bar(document.getElementById('chartid'));
          chart.draw(dataTable, google.charts.Bar.convertOptions(options));
          showChart();
          return initMaterialSelect();
        }, function(error) {
          return console.log('FAIO');
        });
      };
    })(this);
    setEvents = (function(_this) {
      return function() {
        return $scope.$on('result:locale', function(event, data) {
          _this.attrs.fields.endereco = _.pick(EnderecoService.getEnderecoFromLocalidade(data), 'bairro', 'cidade', 'estado');
          return _this.methods.showMensalChart();
        });
      };
    })(this);
    setEvents();
    $scope.methods.showMensalChart();
    initMaterialSelect();
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZlYXR1cmVzL2NoYXJ0cy9tZW5zYWwvY2hhcnQuY29udHJvbGxlci5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFBQSxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FDRSxDQUFDLFVBREgsQ0FDYyx1QkFEZCxFQUN1QyxTQUFDLE1BQUQsRUFBUyxRQUFULEVBQW1CLE1BQW5CLEVBQTJCLGFBQTNCLEVBQTBDLFlBQTFDLEVBQXdELGVBQXhEO0lBQ25DO0FBQUEsUUFBQTtJQUVBLEVBQUEsR0FBSztJQUNMLEtBQUEsR0FBUTtJQUVSLElBQUMsQ0FBQSxPQUFELEdBQVcsTUFBTSxDQUFDLE9BQVAsR0FBaUI7SUFDNUIsSUFBQyxDQUFBLEtBQUQsR0FBVyxNQUFNLENBQUMsS0FBUCxHQUFpQjtJQUU1QixJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsR0FBaUIsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNoQyxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsR0FDRTtNQUFBLE1BQUEsRUFBUSxHQUFSOztJQUVGLG9CQUFBLEdBQXVCLFNBQUE7TUFDckIsTUFBTSxDQUFDLFVBQVAsR0FBb0I7YUFDcEIsTUFBTSxDQUFDLE9BQVAsR0FDRTtRQUFBLE9BQUEsRUFBUyxJQUFUOztJQUhtQjtJQUtwQixvQkFBSCxDQUFBO0lBRUEsU0FBQSxHQUFZLFNBQUE7YUFDVixNQUFNLENBQUMsTUFBUCxHQUFnQjtJQUROO0lBR1osU0FBQSxHQUFZLFNBQUE7YUFDVixNQUFNLENBQUMsTUFBUCxHQUFnQjtJQUROO0lBR1osa0JBQUEsR0FBcUIsU0FBQTthQUNuQixRQUFBLENBQVMsU0FBQTtlQUNKLENBQUEsQ0FBRSwyQkFBRixDQUE4QixDQUFDLGVBQWxDLENBQUE7TUFETyxDQUFULEVBRUUsR0FGRjtJQURtQjtJQUtyQixNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWYsR0FBaUMsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO1FBSTVCLFNBQUgsQ0FBQTtlQUVBLGFBQWEsQ0FBQyxvQkFBZCxDQUFtQyxLQUFDLENBQUEsS0FBSyxDQUFDLE1BQTFDLENBQWlELENBQUMsSUFBbEQsQ0FDRSxTQUFDLFFBQUQ7QUFDRSxjQUFBO1VBQUEsVUFBQSxHQUFhLFlBQVksQ0FBQyxhQUFiLENBQTJCLFFBQVEsQ0FBQyxJQUFwQztVQUViLENBQUMsQ0FBQyxJQUFGLENBQU8sVUFBUCxFQUFtQixTQUFDLEdBQUQ7bUJBQ2pCLEdBQUksQ0FBQSxDQUFBLENBQUosR0FBUyxZQUFZLENBQUMsWUFBYixDQUEwQixHQUFJLENBQUEsQ0FBQSxDQUE5QjtVQURRLENBQW5CO1VBR0EsU0FBQSxHQUFnQixJQUFBLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBckIsQ0FBQTtVQUNoQixTQUFTLENBQUMsU0FBVixDQUFvQixRQUFwQixFQUE4QixLQUE5QjtVQUNBLFNBQVMsQ0FBQyxTQUFWLENBQW9CLFFBQXBCLEVBQThCLFFBQTlCO1VBQ0EsU0FBUyxDQUFDLFNBQVYsQ0FBb0IsUUFBcEIsRUFBOEIsV0FBOUI7VUFDQSxTQUFTLENBQUMsT0FBVixDQUFrQixVQUFsQjtVQUVBLE9BQUEsR0FDRTtZQUFBLEtBQUEsRUFBTyxHQUFQO1lBQ0EsTUFBQSxFQUFRLEdBRFI7WUFFQSxLQUFBLEVBQ0U7Y0FBQSxLQUFBLEVBQVUsVUFBVSxDQUFDLE1BQVgsR0FBb0IsQ0FBdkIsR0FBOEIseUJBQUEsR0FBMEIsVUFBVSxDQUFDLE1BQXJDLEdBQTRDLFFBQTFFLEdBQXVGLDBCQUE5RjtjQUNBLFFBQUEsRUFBVSxzQkFBQSxHQUFzQixDQUFDLE1BQUEsQ0FBQSxDQUFRLENBQUMsR0FBVCxDQUFhLE1BQWIsQ0FBRCxDQURoQzthQUhGOztVQU1GLEtBQUEsR0FBWSxJQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBZCxDQUFrQixRQUFRLENBQUMsY0FBVCxDQUF3QixTQUF4QixDQUFsQjtVQUNaLEtBQUssQ0FBQyxJQUFOLENBQVcsU0FBWCxFQUFzQixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFsQixDQUFpQyxPQUFqQyxDQUF0QjtVQUVHLFNBQUgsQ0FBQTtpQkFDRyxrQkFBSCxDQUFBO1FBdkJGLENBREYsRUEwQkUsU0FBQyxLQUFEO2lCQUNFLE9BQU8sQ0FBQyxHQUFSLENBQVksTUFBWjtRQURGLENBMUJGO01BTitCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQTtJQW9DakMsU0FBQSxHQUFZLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUNWLE1BQU0sQ0FBQyxHQUFQLENBQVcsZUFBWCxFQUE0QixTQUFDLEtBQUQsRUFBUSxJQUFSO1VBQzFCLEtBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQWQsR0FBeUIsQ0FBQyxDQUFDLElBQUYsQ0FBTyxlQUFlLENBQUMseUJBQWhCLENBQTBDLElBQTFDLENBQVAsRUFBd0QsUUFBeEQsRUFBa0UsUUFBbEUsRUFBNEUsUUFBNUU7aUJBQ3RCLEtBQUMsQ0FBQSxPQUFPLENBQUMsZUFBWixDQUFBO1FBRjBCLENBQTVCO01BRFU7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBO0lBS1QsU0FBSCxDQUFBO0lBQ0csTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFsQixDQUFBO0lBQ0csa0JBQUgsQ0FBQTtFQTFFbUMsQ0FEdkM7QUFBQSIsImZpbGUiOiJmZWF0dXJlcy9jaGFydHMvbWVuc2FsL2NoYXJ0LmNvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSAnYWVkZXMnXG4gIC5jb250cm9sbGVyICdDaGFydE1lbnNhbENvbnRyb2xsZXInLCAoJHNjb3BlLCAkdGltZW91dCwgbW9tZW50LCBDaGFydHNTZXJ2aWNlLCBVdGlsc1NlcnZpY2UsIEVuZGVyZWNvU2VydmljZSkgLT5cbiAgICAnbmdJbmplY3QnXG5cbiAgICB2bSA9IHRoaXNcbiAgICBDaGFydCA9IG51bGxcblxuICAgIEBtZXRob2RzID0gJHNjb3BlLm1ldGhvZHMgPSB7fVxuICAgIEBhdHRycyAgID0gJHNjb3BlLmF0dHJzICAgPSB7fVxuXG4gICAgQGF0dHJzLmZvY29zICAgPSAkc2NvcGUuJHBhcmVudC5mb2Nvc1xuICAgIEBhdHRycy5maWVsZHMgPVxuICAgICAgZm9jb0lkOiAnMSdcblxuICAgIG5nQXV0b2NvbXBsZXRlQ29uZmlnID0gLT5cbiAgICAgICRzY29wZS5sb2NhbGlkYWRlID0gJydcbiAgICAgICRzY29wZS5vcHRpb25zID1cbiAgICAgICAgY291bnRyeTogJ2JyJ1xuXG4gICAgZG8gbmdBdXRvY29tcGxldGVDb25maWdcblxuICAgIHNob3dDaGFydCA9IC0+XG4gICAgICAkc2NvcGUubG9hZGVyID0gZmFsc2VcblxuICAgIGhpZGVDaGFydCA9IC0+XG4gICAgICAkc2NvcGUubG9hZGVyID0gdHJ1ZVxuXG4gICAgaW5pdE1hdGVyaWFsU2VsZWN0ID0gLT5cbiAgICAgICR0aW1lb3V0ICgpIC0+XG4gICAgICAgIGRvICQoJ1t1aS12aWV3PVwibWVuc2FsXCJdIHNlbGVjdCcpLm1hdGVyaWFsX3NlbGVjdFxuICAgICAgLCAxMDBcblxuICAgICRzY29wZS5tZXRob2RzLnNob3dNZW5zYWxDaGFydCA9ID0+XG4gICAgICAjVXBkYXRlIHRoZSBtb2RlbCB0byBhY3RpdmF0ZSB0aGUgY2hhcnQgb24gdGhlIERPTVxuICAgICAgI05vdGUgdGhlIHVzZSBvZiAkc2NvcGUuJGFwcGx5IHNpbmNlIHdlJ3JlIGluIHRoZVxuICAgICAgI0dvb2dsZSBMb2FkZXIgY2FsbGJhY2suXG4gICAgICBkbyBoaWRlQ2hhcnRcblxuICAgICAgQ2hhcnRzU2VydmljZS5nZXRQcmV2ZW5jb2VzTWVuc2FpcyhAYXR0cnMuZmllbGRzKS50aGVuKFxuICAgICAgICAocmVzcG9uc2UpIC0+XG4gICAgICAgICAgbWFwcGVkUm93cyA9IFV0aWxzU2VydmljZS5vYmplY3RUb0FycmF5IHJlc3BvbnNlLmRhdGFcblxuICAgICAgICAgIF8uZWFjaCBtYXBwZWRSb3dzLCAocm93KSAtPlxuICAgICAgICAgICAgcm93WzBdID0gVXRpbHNTZXJ2aWNlLmdldE1vbnRoUFRCUiByb3dbMF1cblxuICAgICAgICAgIGRhdGFUYWJsZSA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5EYXRhVGFibGUoKVxuICAgICAgICAgIGRhdGFUYWJsZS5hZGRDb2x1bW4gJ3N0cmluZycsICdNw6pzJ1xuICAgICAgICAgIGRhdGFUYWJsZS5hZGRDb2x1bW4gJ251bWJlcicsICdFbSBkaWEnXG4gICAgICAgICAgZGF0YVRhYmxlLmFkZENvbHVtbiAnbnVtYmVyJywgJ0F0cmFzYWRhcydcbiAgICAgICAgICBkYXRhVGFibGUuYWRkUm93cyBtYXBwZWRSb3dzXG5cbiAgICAgICAgICBvcHRpb25zID1cbiAgICAgICAgICAgIHdpZHRoOiA2NTBcbiAgICAgICAgICAgIGhlaWdodDogMzAwXG4gICAgICAgICAgICBjaGFydDpcbiAgICAgICAgICAgICAgdGl0bGU6IGlmIG1hcHBlZFJvd3MubGVuZ3RoID4gMSB0aGVuIFwiUGVyY2VudHVhbCBkb3Mgw7psdGltb3MgI3ttYXBwZWRSb3dzLmxlbmd0aH0gbWVzZXNcIiBlbHNlIFwiUGVyY2VudHVhbCBkbyDDumx0aW1vIG3DqnNcIlxuICAgICAgICAgICAgICBzdWJ0aXRsZTogXCJFbSBkaWEgZSBhdHJhc2FkYXM6ICN7bW9tZW50KCkuZ2V0KCd5ZWFyJyl9XCJcblxuICAgICAgICAgIGNoYXJ0ID0gbmV3IGdvb2dsZS5jaGFydHMuQmFyIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGFydGlkJylcbiAgICAgICAgICBjaGFydC5kcmF3IGRhdGFUYWJsZSwgZ29vZ2xlLmNoYXJ0cy5CYXIuY29udmVydE9wdGlvbnMob3B0aW9ucylcblxuICAgICAgICAgIGRvIHNob3dDaGFydFxuICAgICAgICAgIGRvIGluaXRNYXRlcmlhbFNlbGVjdFxuXG4gICAgICAgIChlcnJvcikgLT5cbiAgICAgICAgICBjb25zb2xlLmxvZyAnRkFJTydcbiAgICAgIClcblxuICAgIHNldEV2ZW50cyA9ID0+XG4gICAgICAkc2NvcGUuJG9uICdyZXN1bHQ6bG9jYWxlJywgKGV2ZW50LCBkYXRhKSA9PlxuICAgICAgICBAYXR0cnMuZmllbGRzLmVuZGVyZWNvID0gXy5waWNrIEVuZGVyZWNvU2VydmljZS5nZXRFbmRlcmVjb0Zyb21Mb2NhbGlkYWRlKGRhdGEpLCAnYmFpcnJvJywgJ2NpZGFkZScsICdlc3RhZG8nXG4gICAgICAgIGRvIEBtZXRob2RzLnNob3dNZW5zYWxDaGFydFxuXG4gICAgZG8gc2V0RXZlbnRzXG4gICAgZG8gJHNjb3BlLm1ldGhvZHMuc2hvd01lbnNhbENoYXJ0XG4gICAgZG8gaW5pdE1hdGVyaWFsU2VsZWN0XG5cbiAgICByZXR1cm5cblxuIl19