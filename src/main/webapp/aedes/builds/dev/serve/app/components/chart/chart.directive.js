(function() {
  angular.module('aedes').directive('googleChart', function() {
    'ngInject';
    var directive;
    return directive = {
      restrict: "A",
      link: function($scope, $elem, $attr) {
        var initChart, initLoader;
        this.$el = $elem[0];
        initLoader = function() {
          return this.$el.html('HAUIDHUSADHUASHUIDAUDSHAID');
        };
        initChart = function() {
          var chartType, dt, googleChart, model, options;
          model = $scope.$eval($attr.ngModel);
          if (model) {
            dt = model.data;
            options = model.options;
            chartType = $attr.googleChart;
            googleChart = new google.visualization[chartType](this.$el);
            return googleChart.draw(dt, options);
          }
        };
        return $scope.$watch($attr.trigger, function(val) {
          if (val === true) {
            return initChart();
          } else {
            return initLoader();
          }
        });
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoYXJ0LmRpcmVjdGl2ZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFBQSxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FDRSxDQUFDLFNBREgsQ0FDYSxhQURiLEVBQzRCLFNBQUE7SUFDeEI7QUFBQSxRQUFBO1dBRUEsU0FBQSxHQUNJO01BQUEsUUFBQSxFQUFXLEdBQVg7TUFDQSxJQUFBLEVBQU0sU0FBQyxNQUFELEVBQVMsS0FBVCxFQUFnQixLQUFoQjtBQUNKLFlBQUE7UUFBQSxJQUFDLENBQUEsR0FBRCxHQUFPLEtBQU0sQ0FBQSxDQUFBO1FBRWIsVUFBQSxHQUFhLFNBQUE7aUJBQ1gsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFMLENBQVUsNEJBQVY7UUFEVztRQUliLFNBQUEsR0FBWSxTQUFBO0FBSVYsY0FBQTtVQUFBLEtBQUEsR0FBUSxNQUFNLENBQUMsS0FBUCxDQUFhLEtBQUssQ0FBQyxPQUFuQjtVQU1SLElBQUcsS0FBSDtZQUNFLEVBQUEsR0FBSyxLQUFLLENBQUM7WUFDWCxPQUFBLEdBQVUsS0FBSyxDQUFDO1lBQ2hCLFNBQUEsR0FBWSxLQUFLLENBQUM7WUFFbEIsV0FBQSxHQUFrQixJQUFBLE1BQU0sQ0FBQyxhQUFjLENBQUEsU0FBQSxDQUFyQixDQUFnQyxJQUFDLENBQUEsR0FBakM7bUJBQ2xCLFdBQVcsQ0FBQyxJQUFaLENBQWlCLEVBQWpCLEVBQW9CLE9BQXBCLEVBTkY7O1FBVlU7ZUFvQlosTUFBTSxDQUFDLE1BQVAsQ0FBYyxLQUFLLENBQUMsT0FBcEIsRUFBNkIsU0FBQyxHQUFEO1VBQzNCLElBQUcsR0FBQSxLQUFPLElBQVY7bUJBQ0ssU0FBSCxDQUFBLEVBREY7V0FBQSxNQUFBO21CQUdLLFVBQUgsQ0FBQSxFQUhGOztRQUQyQixDQUE3QjtNQTNCSSxDQUROOztFQUpvQixDQUQ1QjtBQUFBIiwiZmlsZSI6ImNoYXJ0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlICdhZWRlcydcbiAgLmRpcmVjdGl2ZSAnZ29vZ2xlQ2hhcnQnLCAtPlxuICAgICduZ0luamVjdCdcblxuICAgIGRpcmVjdGl2ZSA9XG4gICAgICAgIHJlc3RyaWN0IDogXCJBXCIsXG4gICAgICAgIGxpbms6ICgkc2NvcGUsICRlbGVtLCAkYXR0cikgLT5cbiAgICAgICAgICBAJGVsID0gJGVsZW1bMF1cblxuICAgICAgICAgIGluaXRMb2FkZXIgPSAtPlxuICAgICAgICAgICAgQCRlbC5odG1sKCdIQVVJREhVU0FESFVBU0hVSURBVURTSEFJRCcpXG5cbiAgICAgICAgICAjRnVuY3Rpb24gdG8gcnVuIHdoZW4gdGhlIHRyaWdnZXIgaXMgYWN0aXZhdGVkXG4gICAgICAgICAgaW5pdENoYXJ0ID0gLT5cblxuICAgICAgICAgICAgIyBSdW4gJGV2YWwgb24gdGhlICRzY29wZSBtb2RlbCBwYXNzZWRcbiAgICAgICAgICAgICMgYXMgYW4gSFRNTCBhdHRyaWJ1dGVcbiAgICAgICAgICAgIG1vZGVsID0gJHNjb3BlLiRldmFsICRhdHRyLm5nTW9kZWxcblxuICAgICAgICAgICAgI0lmIHRoZSBtb2RlbCBpcyBkZWZpbmVkIG9uIHRoZSBzY29wZSxcbiAgICAgICAgICAgICNncmFiIHRoZSBkYXRhVGFibGUgdGhhdCB3YXMgc2V0IHVwXG4gICAgICAgICAgICAjZHVyaW5nIHRoZSBHb29nbGUgTG9hZGVyIGNhbGxiYWNrXG4gICAgICAgICAgICAjZnVuY3Rpb24sIGFuZCBkcmF3IHRoZSBjaGFydFxuICAgICAgICAgICAgaWYgbW9kZWxcbiAgICAgICAgICAgICAgZHQgPSBtb2RlbC5kYXRhXG4gICAgICAgICAgICAgIG9wdGlvbnMgPSBtb2RlbC5vcHRpb25zXG4gICAgICAgICAgICAgIGNoYXJ0VHlwZSA9ICRhdHRyLmdvb2dsZUNoYXJ0XG5cbiAgICAgICAgICAgICAgZ29vZ2xlQ2hhcnQgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb25bY2hhcnRUeXBlXSBAJGVsXG4gICAgICAgICAgICAgIGdvb2dsZUNoYXJ0LmRyYXcgZHQsb3B0aW9uc1xuXG4gICAgICAgICAgIyBXYXRjaCB0aGUgc2NvcGUgdmFsdWUgcGxhY2VkIG9uIHRoZSB0cmlnZ2VyIGF0dHJpYnV0ZVxuICAgICAgICAgICMgaWYgaXQgZXZlciBmbGlwcyB0byB0cnVlLCBhY3RpdmF0ZSB0aGUgY2hhcnRcbiAgICAgICAgICAkc2NvcGUuJHdhdGNoKCRhdHRyLnRyaWdnZXIsICh2YWwpIC0+XG4gICAgICAgICAgICBpZiB2YWwgaXMgdHJ1ZVxuICAgICAgICAgICAgICBkbyBpbml0Q2hhcnRcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgZG8gaW5pdExvYWRlclxuICAgICAgICAgIClcblxuIl19