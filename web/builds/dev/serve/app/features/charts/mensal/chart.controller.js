(function() {
  angular.module('aedes').controller('ChartMensalController', function($scope, $timeout, moment, ChartsService, UtilsService, EnderecoService) {
    'ngInject';
    var Chart, hideChart, initMaterialSelect, ngAutocompleteConfig, setEvents, showChart, vm;
    vm = this;
    Chart = null;
    this.methods = $scope.methods = {};
    this.attrs = $scope.attrs = {};
    this.attrs.focos = $scope.$parent.focos;
    this.attrs.fields = {
      focoId: null
    };
    ngAutocompleteConfig = function() {
      $scope.localidade = '';
      return $scope.options = {
        country: 'br'
      };
    };
    ngAutocompleteConfig();
    showChart = function() {
      return $scope.loader = false;
    };
    hideChart = function() {
      return $scope.loader = true;
    };
    initMaterialSelect = function() {
      return $timeout(function() {
        return $('[ui-view="mensal"] select').material_select();
      }, 100);
    };
    $scope.methods.showMensalChart = (function(_this) {
      return function() {
        hideChart();
        return ChartsService.getPrevencoesMensais(_this.attrs.fields).then(function(response) {
          var chart, dataTable, mappedRows, options;
          mappedRows = UtilsService.objectToArray(response.data);
          _.each(mappedRows, function(row) {
            return row[0] = UtilsService.getMonthPTBR(row[0]);
          });
          dataTable = new google.visualization.DataTable();
          dataTable.addColumn('string', 'Mês');
          dataTable.addColumn('number', 'Em dia');
          dataTable.addColumn('number', 'Atrasadas');
          dataTable.addRows(mappedRows);
          options = {
            width: 650,
            height: 300,
            chart: {
              title: mappedRows.length > 1 ? "Percentual dos últimos " + mappedRows.length + " meses" : "Percentual do último mês",
              subtitle: "Em dia e atrasadas: " + (moment().get('year'))
            }
          };
          chart = new google.charts.Bar(document.getElementById('chartid'));
          chart.draw(dataTable, google.charts.Bar.convertOptions(options));
          showChart();
          return initMaterialSelect();
        }, function(error) {
          return console.log('FAIO');
        });
      };
    })(this);
    $scope.changeLocalMensal = (function(_this) {
      return function(local) {
        if (!local) {
          _this.attrs.fields.endereco = '';
          return _this.methods.showMensalChart();
        }
      };
    })(this);
    setEvents = (function(_this) {
      return function() {
        return $scope.$on('result:locale', function(event, data) {
          _this.attrs.fields.endereco = _.pick(EnderecoService.getEnderecoFromLocalidade(data), 'bairro', 'cidade', 'estado');
          return _this.methods.showMensalChart();
        });
      };
    })(this);
    setEvents();
    $scope.methods.showMensalChart();
    initMaterialSelect();
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZlYXR1cmVzL2NoYXJ0cy9tZW5zYWwvY2hhcnQuY29udHJvbGxlci5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFBQSxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FDRSxDQUFDLFVBREgsQ0FDYyx1QkFEZCxFQUN1QyxTQUFDLE1BQUQsRUFBUyxRQUFULEVBQW1CLE1BQW5CLEVBQTJCLGFBQTNCLEVBQTBDLFlBQTFDLEVBQXdELGVBQXhEO0lBQ25DO0FBQUEsUUFBQTtJQUVBLEVBQUEsR0FBSztJQUNMLEtBQUEsR0FBUTtJQUVSLElBQUMsQ0FBQSxPQUFELEdBQVcsTUFBTSxDQUFDLE9BQVAsR0FBaUI7SUFDNUIsSUFBQyxDQUFBLEtBQUQsR0FBVyxNQUFNLENBQUMsS0FBUCxHQUFpQjtJQUU1QixJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsR0FBaUIsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNoQyxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsR0FDRTtNQUFBLE1BQUEsRUFBUSxJQUFSOztJQUVGLG9CQUFBLEdBQXVCLFNBQUE7TUFDckIsTUFBTSxDQUFDLFVBQVAsR0FBb0I7YUFDcEIsTUFBTSxDQUFDLE9BQVAsR0FDRTtRQUFBLE9BQUEsRUFBUyxJQUFUOztJQUhtQjtJQUtwQixvQkFBSCxDQUFBO0lBRUEsU0FBQSxHQUFZLFNBQUE7YUFDVixNQUFNLENBQUMsTUFBUCxHQUFnQjtJQUROO0lBR1osU0FBQSxHQUFZLFNBQUE7YUFDVixNQUFNLENBQUMsTUFBUCxHQUFnQjtJQUROO0lBR1osa0JBQUEsR0FBcUIsU0FBQTthQUNuQixRQUFBLENBQVMsU0FBQTtlQUNKLENBQUEsQ0FBRSwyQkFBRixDQUE4QixDQUFDLGVBQWxDLENBQUE7TUFETyxDQUFULEVBRUUsR0FGRjtJQURtQjtJQUtyQixNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWYsR0FBaUMsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO1FBSTVCLFNBQUgsQ0FBQTtlQUVBLGFBQWEsQ0FBQyxvQkFBZCxDQUFtQyxLQUFDLENBQUEsS0FBSyxDQUFDLE1BQTFDLENBQWlELENBQUMsSUFBbEQsQ0FDRSxTQUFDLFFBQUQ7QUFDRSxjQUFBO1VBQUEsVUFBQSxHQUFhLFlBQVksQ0FBQyxhQUFiLENBQTJCLFFBQVEsQ0FBQyxJQUFwQztVQUViLENBQUMsQ0FBQyxJQUFGLENBQU8sVUFBUCxFQUFtQixTQUFDLEdBQUQ7bUJBQ2pCLEdBQUksQ0FBQSxDQUFBLENBQUosR0FBUyxZQUFZLENBQUMsWUFBYixDQUEwQixHQUFJLENBQUEsQ0FBQSxDQUE5QjtVQURRLENBQW5CO1VBR0EsU0FBQSxHQUFnQixJQUFBLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBckIsQ0FBQTtVQUNoQixTQUFTLENBQUMsU0FBVixDQUFvQixRQUFwQixFQUE4QixLQUE5QjtVQUNBLFNBQVMsQ0FBQyxTQUFWLENBQW9CLFFBQXBCLEVBQThCLFFBQTlCO1VBQ0EsU0FBUyxDQUFDLFNBQVYsQ0FBb0IsUUFBcEIsRUFBOEIsV0FBOUI7VUFDQSxTQUFTLENBQUMsT0FBVixDQUFrQixVQUFsQjtVQUVBLE9BQUEsR0FDRTtZQUFBLEtBQUEsRUFBTyxHQUFQO1lBQ0EsTUFBQSxFQUFRLEdBRFI7WUFFQSxLQUFBLEVBQ0U7Y0FBQSxLQUFBLEVBQVUsVUFBVSxDQUFDLE1BQVgsR0FBb0IsQ0FBdkIsR0FBOEIseUJBQUEsR0FBMEIsVUFBVSxDQUFDLE1BQXJDLEdBQTRDLFFBQTFFLEdBQXVGLDBCQUE5RjtjQUNBLFFBQUEsRUFBVSxzQkFBQSxHQUFzQixDQUFDLE1BQUEsQ0FBQSxDQUFRLENBQUMsR0FBVCxDQUFhLE1BQWIsQ0FBRCxDQURoQzthQUhGOztVQU1GLEtBQUEsR0FBWSxJQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBZCxDQUFrQixRQUFRLENBQUMsY0FBVCxDQUF3QixTQUF4QixDQUFsQjtVQUNaLEtBQUssQ0FBQyxJQUFOLENBQVcsU0FBWCxFQUFzQixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFsQixDQUFpQyxPQUFqQyxDQUF0QjtVQUVHLFNBQUgsQ0FBQTtpQkFDRyxrQkFBSCxDQUFBO1FBdkJGLENBREYsRUEwQkUsU0FBQyxLQUFEO2lCQUNFLE9BQU8sQ0FBQyxHQUFSLENBQVksTUFBWjtRQURGLENBMUJGO01BTitCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQTtJQW9DakMsTUFBTSxDQUFDLGlCQUFQLEdBQTJCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxLQUFEO1FBQ3pCLElBQUEsQ0FBTyxLQUFQO1VBQ0UsS0FBQyxDQUFBLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBZCxHQUF5QjtpQkFDdEIsS0FBQyxDQUFBLE9BQU8sQ0FBQyxlQUFaLENBQUEsRUFGRjs7TUFEeUI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBO0lBSzNCLFNBQUEsR0FBWSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7ZUFDVixNQUFNLENBQUMsR0FBUCxDQUFXLGVBQVgsRUFBNEIsU0FBQyxLQUFELEVBQVEsSUFBUjtVQUMxQixLQUFDLENBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFkLEdBQXlCLENBQUMsQ0FBQyxJQUFGLENBQU8sZUFBZSxDQUFDLHlCQUFoQixDQUEwQyxJQUExQyxDQUFQLEVBQXdELFFBQXhELEVBQWtFLFFBQWxFLEVBQTRFLFFBQTVFO2lCQUN0QixLQUFDLENBQUEsT0FBTyxDQUFDLGVBQVosQ0FBQTtRQUYwQixDQUE1QjtNQURVO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQTtJQUtULFNBQUgsQ0FBQTtJQUNHLE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBbEIsQ0FBQTtJQUNHLGtCQUFILENBQUE7RUEvRW1DLENBRHZDO0FBQUEiLCJmaWxlIjoiZmVhdHVyZXMvY2hhcnRzL21lbnNhbC9jaGFydC5jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUgJ2FlZGVzJ1xuICAuY29udHJvbGxlciAnQ2hhcnRNZW5zYWxDb250cm9sbGVyJywgKCRzY29wZSwgJHRpbWVvdXQsIG1vbWVudCwgQ2hhcnRzU2VydmljZSwgVXRpbHNTZXJ2aWNlLCBFbmRlcmVjb1NlcnZpY2UpIC0+XG4gICAgJ25nSW5qZWN0J1xuXG4gICAgdm0gPSB0aGlzXG4gICAgQ2hhcnQgPSBudWxsXG5cbiAgICBAbWV0aG9kcyA9ICRzY29wZS5tZXRob2RzID0ge31cbiAgICBAYXR0cnMgICA9ICRzY29wZS5hdHRycyAgID0ge31cblxuICAgIEBhdHRycy5mb2NvcyAgID0gJHNjb3BlLiRwYXJlbnQuZm9jb3NcbiAgICBAYXR0cnMuZmllbGRzID1cbiAgICAgIGZvY29JZDogbnVsbFxuXG4gICAgbmdBdXRvY29tcGxldGVDb25maWcgPSAtPlxuICAgICAgJHNjb3BlLmxvY2FsaWRhZGUgPSAnJ1xuICAgICAgJHNjb3BlLm9wdGlvbnMgPVxuICAgICAgICBjb3VudHJ5OiAnYnInXG5cbiAgICBkbyBuZ0F1dG9jb21wbGV0ZUNvbmZpZ1xuXG4gICAgc2hvd0NoYXJ0ID0gLT5cbiAgICAgICRzY29wZS5sb2FkZXIgPSBmYWxzZVxuXG4gICAgaGlkZUNoYXJ0ID0gLT5cbiAgICAgICRzY29wZS5sb2FkZXIgPSB0cnVlXG5cbiAgICBpbml0TWF0ZXJpYWxTZWxlY3QgPSAtPlxuICAgICAgJHRpbWVvdXQgKCkgLT5cbiAgICAgICAgZG8gJCgnW3VpLXZpZXc9XCJtZW5zYWxcIl0gc2VsZWN0JykubWF0ZXJpYWxfc2VsZWN0XG4gICAgICAsIDEwMFxuXG4gICAgJHNjb3BlLm1ldGhvZHMuc2hvd01lbnNhbENoYXJ0ID0gPT5cbiAgICAgICNVcGRhdGUgdGhlIG1vZGVsIHRvIGFjdGl2YXRlIHRoZSBjaGFydCBvbiB0aGUgRE9NXG4gICAgICAjTm90ZSB0aGUgdXNlIG9mICRzY29wZS4kYXBwbHkgc2luY2Ugd2UncmUgaW4gdGhlXG4gICAgICAjR29vZ2xlIExvYWRlciBjYWxsYmFjay5cbiAgICAgIGRvIGhpZGVDaGFydFxuXG4gICAgICBDaGFydHNTZXJ2aWNlLmdldFByZXZlbmNvZXNNZW5zYWlzKEBhdHRycy5maWVsZHMpLnRoZW4oXG4gICAgICAgIChyZXNwb25zZSkgLT5cbiAgICAgICAgICBtYXBwZWRSb3dzID0gVXRpbHNTZXJ2aWNlLm9iamVjdFRvQXJyYXkgcmVzcG9uc2UuZGF0YVxuXG4gICAgICAgICAgXy5lYWNoIG1hcHBlZFJvd3MsIChyb3cpIC0+XG4gICAgICAgICAgICByb3dbMF0gPSBVdGlsc1NlcnZpY2UuZ2V0TW9udGhQVEJSIHJvd1swXVxuXG4gICAgICAgICAgZGF0YVRhYmxlID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkRhdGFUYWJsZSgpXG4gICAgICAgICAgZGF0YVRhYmxlLmFkZENvbHVtbiAnc3RyaW5nJywgJ03DqnMnXG4gICAgICAgICAgZGF0YVRhYmxlLmFkZENvbHVtbiAnbnVtYmVyJywgJ0VtIGRpYSdcbiAgICAgICAgICBkYXRhVGFibGUuYWRkQ29sdW1uICdudW1iZXInLCAnQXRyYXNhZGFzJ1xuICAgICAgICAgIGRhdGFUYWJsZS5hZGRSb3dzIG1hcHBlZFJvd3NcblxuICAgICAgICAgIG9wdGlvbnMgPVxuICAgICAgICAgICAgd2lkdGg6IDY1MFxuICAgICAgICAgICAgaGVpZ2h0OiAzMDBcbiAgICAgICAgICAgIGNoYXJ0OlxuICAgICAgICAgICAgICB0aXRsZTogaWYgbWFwcGVkUm93cy5sZW5ndGggPiAxIHRoZW4gXCJQZXJjZW50dWFsIGRvcyDDumx0aW1vcyAje21hcHBlZFJvd3MubGVuZ3RofSBtZXNlc1wiIGVsc2UgXCJQZXJjZW50dWFsIGRvIMO6bHRpbW8gbcOqc1wiXG4gICAgICAgICAgICAgIHN1YnRpdGxlOiBcIkVtIGRpYSBlIGF0cmFzYWRhczogI3ttb21lbnQoKS5nZXQoJ3llYXInKX1cIlxuXG4gICAgICAgICAgY2hhcnQgPSBuZXcgZ29vZ2xlLmNoYXJ0cy5CYXIgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXJ0aWQnKVxuICAgICAgICAgIGNoYXJ0LmRyYXcgZGF0YVRhYmxlLCBnb29nbGUuY2hhcnRzLkJhci5jb252ZXJ0T3B0aW9ucyhvcHRpb25zKVxuXG4gICAgICAgICAgZG8gc2hvd0NoYXJ0XG4gICAgICAgICAgZG8gaW5pdE1hdGVyaWFsU2VsZWN0XG5cbiAgICAgICAgKGVycm9yKSAtPlxuICAgICAgICAgIGNvbnNvbGUubG9nICdGQUlPJ1xuICAgICAgKVxuXG4gICAgJHNjb3BlLmNoYW5nZUxvY2FsTWVuc2FsID0gKGxvY2FsKSA9PlxuICAgICAgdW5sZXNzIGxvY2FsXG4gICAgICAgIEBhdHRycy5maWVsZHMuZW5kZXJlY28gPSAnJ1xuICAgICAgICBkbyBAbWV0aG9kcy5zaG93TWVuc2FsQ2hhcnRcblxuICAgIHNldEV2ZW50cyA9ID0+XG4gICAgICAkc2NvcGUuJG9uICdyZXN1bHQ6bG9jYWxlJywgKGV2ZW50LCBkYXRhKSA9PlxuICAgICAgICBAYXR0cnMuZmllbGRzLmVuZGVyZWNvID0gXy5waWNrIEVuZGVyZWNvU2VydmljZS5nZXRFbmRlcmVjb0Zyb21Mb2NhbGlkYWRlKGRhdGEpLCAnYmFpcnJvJywgJ2NpZGFkZScsICdlc3RhZG8nXG4gICAgICAgIGRvIEBtZXRob2RzLnNob3dNZW5zYWxDaGFydFxuXG4gICAgZG8gc2V0RXZlbnRzXG4gICAgZG8gJHNjb3BlLm1ldGhvZHMuc2hvd01lbnNhbENoYXJ0XG4gICAgZG8gaW5pdE1hdGVyaWFsU2VsZWN0XG5cbiAgICByZXR1cm5cblxuIl19