(function() {
  angular.module('aedes').controller('ChartRegionalController', function($scope, ChartService, ChartsService, UtilsService) {
    'ngInject';
    var Chart, hideChart, setChart, showChart, vm;
    vm = this;
    Chart = null;
    this.methods = $scope.methods = {};
    $scope.dataModel = {
      visual: {},
      metaData: {},
      data: {},
      options: {}
    };
    showChart = function() {
      return $scope.loader = false;
    };
    hideChart = function() {
      return $scope.loader = true;
    };
    setChart = function(chart) {
      return Chart = chart;
    };
    $scope.methods.showRegiaoChart = function() {
      hideChart();
      return ChartsService.getPrevencoesRegionais().then(function(response) {
        var DataTable, mappedRows;
        mappedRows = UtilsService.objectToArray(response.data);
        $scope.localidades = response.data;
        DataTable = new google.visualization.DataTable();
        DataTable.addColumn('string', 'States');
        DataTable.addColumn('number', 'Em dias');
        DataTable.addColumn('number', 'Atrasadas');
        DataTable.addRows(mappedRows);
        $scope.dataModel.data = DataTable;
        $scope.dataModel.setChart = setChart;
        $scope.dataModel.options = {
          'width': 500,
          'height': 300,
          region: 'BR',
          resolution: 'provinces',
          displayMode: 'regions',
          colorAxis: {
            colors: ['blue', 'red']
          }
        };
        $scope.percentChartHeader = "Estados mais afetados";
        return showChart();
      }, function(error) {
        return console.log(error);
      });
    };
    $scope.methods.showCityChart = function() {
      hideChart();
      return ChartsService.getPrevencoesEmCidades().then(function(response) {
        var header, mappedRows;
        header = new Array(['City', 'Em dia', 'Atrasada']);
        mappedRows = UtilsService.objectToArray(response.data);
        mappedRows = _.union(header, mappedRows);
        $scope.localidades = response.data;
        $scope.dataModel.data = new google.visualization.arrayToDataTable(mappedRows);
        $scope.dataModel.options = {
          sizeAxis: {
            minValue: 0,
            maxValue: 100
          },
          region: 'BR',
          displayMode: 'markers',
          colorAxis: {
            colors: ['blue', 'red']
          },
          'width': 500,
          'height': 300
        };
        $scope.percentChartHeader = "Cidades mais afetadas";
        return showChart();
      }, function(error) {
        return console.log(error);
      });
    };
    $scope.methods.showRegiaoChart();
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZlYXR1cmVzL2NoYXJ0cy9yZWdpb25hbC9jaGFydC5jb250cm9sbGVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBLE9BQU8sQ0FBQyxNQUFSLENBQWUsT0FBZixDQUNFLENBQUMsVUFESCxDQUNjLHlCQURkLEVBQ3lDLFNBQUMsTUFBRCxFQUFTLFlBQVQsRUFBdUIsYUFBdkIsRUFBc0MsWUFBdEM7SUFDckM7QUFBQSxRQUFBO0lBRUEsRUFBQSxHQUFLO0lBQ0wsS0FBQSxHQUFRO0lBRVIsSUFBQyxDQUFBLE9BQUQsR0FBVyxNQUFNLENBQUMsT0FBUCxHQUFpQjtJQUs1QixNQUFNLENBQUMsU0FBUCxHQUFtQjtNQUNqQixNQUFBLEVBQVEsRUFEUztNQUVqQixRQUFBLEVBQVUsRUFGTztNQUdqQixJQUFBLEVBQU0sRUFIVztNQUlqQixPQUFBLEVBQVMsRUFKUTs7SUFPbkIsU0FBQSxHQUFZLFNBQUE7YUFDVixNQUFNLENBQUMsTUFBUCxHQUFnQjtJQUROO0lBR1osU0FBQSxHQUFZLFNBQUE7YUFDVixNQUFNLENBQUMsTUFBUCxHQUFnQjtJQUROO0lBR1osUUFBQSxHQUFXLFNBQUMsS0FBRDthQUNULEtBQUEsR0FBUTtJQURDO0lBR1gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFmLEdBQWlDLFNBQUE7TUFJNUIsU0FBSCxDQUFBO2FBRUEsYUFBYSxDQUFDLHNCQUFkLENBQUEsQ0FBc0MsQ0FBQyxJQUF2QyxDQUNFLFNBQUMsUUFBRDtBQUNFLFlBQUE7UUFBQSxVQUFBLEdBQWEsWUFBWSxDQUFDLGFBQWIsQ0FBMkIsUUFBUSxDQUFDLElBQXBDO1FBRWIsTUFBTSxDQUFDLFdBQVAsR0FBcUIsUUFBUSxDQUFDO1FBRTlCLFNBQUEsR0FBZ0IsSUFBQSxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQXJCLENBQUE7UUFDaEIsU0FBUyxDQUFDLFNBQVYsQ0FBb0IsUUFBcEIsRUFBOEIsUUFBOUI7UUFDQSxTQUFTLENBQUMsU0FBVixDQUFvQixRQUFwQixFQUE4QixTQUE5QjtRQUNBLFNBQVMsQ0FBQyxTQUFWLENBQW9CLFFBQXBCLEVBQThCLFdBQTlCO1FBQ0EsU0FBUyxDQUFDLE9BQVYsQ0FBa0IsVUFBbEI7UUFFQSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQWpCLEdBQXdCO1FBQ3hCLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBakIsR0FBNEI7UUFFNUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFqQixHQUNFO1VBQUEsT0FBQSxFQUFTLEdBQVQ7VUFDQSxRQUFBLEVBQVUsR0FEVjtVQUVBLE1BQUEsRUFBUSxJQUZSO1VBR0EsVUFBQSxFQUFZLFdBSFo7VUFJQSxXQUFBLEVBQWEsU0FKYjtVQUtBLFNBQUEsRUFDRTtZQUFBLE1BQUEsRUFBUSxDQUFDLE1BQUQsRUFBUyxLQUFULENBQVI7V0FORjs7UUFRRixNQUFNLENBQUMsa0JBQVAsR0FBNEI7ZUFFekIsU0FBSCxDQUFBO01BekJGLENBREYsRUE0QkUsU0FBQyxLQUFEO2VBQ0UsT0FBTyxDQUFDLEdBQVIsQ0FBWSxLQUFaO01BREYsQ0E1QkY7SUFOK0I7SUFzQ2pDLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBZixHQUFpQyxTQUFBO01BSTVCLFNBQUgsQ0FBQTthQUVBLGFBQWEsQ0FBQyxzQkFBZCxDQUFBLENBQXNDLENBQUMsSUFBdkMsQ0FDRSxTQUFDLFFBQUQ7QUFDRSxZQUFBO1FBQUEsTUFBQSxHQUFpQixJQUFBLEtBQUEsQ0FBTSxDQUFDLE1BQUQsRUFBUyxRQUFULEVBQW1CLFVBQW5CLENBQU47UUFDakIsVUFBQSxHQUFhLFlBQVksQ0FBQyxhQUFiLENBQTJCLFFBQVEsQ0FBQyxJQUFwQztRQUNiLFVBQUEsR0FBYSxDQUFDLENBQUMsS0FBRixDQUFRLE1BQVIsRUFBZ0IsVUFBaEI7UUFFYixNQUFNLENBQUMsV0FBUCxHQUFxQixRQUFRLENBQUM7UUFDOUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFqQixHQUE0QixJQUFBLE1BQU0sQ0FBQyxhQUFhLENBQUMsZ0JBQXJCLENBQXNDLFVBQXRDO1FBRTVCLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBakIsR0FDRTtVQUFBLFFBQUEsRUFBVTtZQUFDLFFBQUEsRUFBVSxDQUFYO1lBQWMsUUFBQSxFQUFVLEdBQXhCO1dBQVY7VUFDQSxNQUFBLEVBQVEsSUFEUjtVQUVBLFdBQUEsRUFBYSxTQUZiO1VBR0EsU0FBQSxFQUFXO1lBQUMsTUFBQSxFQUFRLENBQUMsTUFBRCxFQUFTLEtBQVQsQ0FBVDtXQUhYO1VBSUEsT0FBQSxFQUFTLEdBSlQ7VUFLQSxRQUFBLEVBQVUsR0FMVjs7UUFPRixNQUFNLENBQUMsa0JBQVAsR0FBNEI7ZUFFekIsU0FBSCxDQUFBO01BbEJGLENBREYsRUFxQkUsU0FBQyxLQUFEO2VBQ0UsT0FBTyxDQUFDLEdBQVIsQ0FBWSxLQUFaO01BREYsQ0FyQkY7SUFOK0I7SUErQjlCLE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBbEIsQ0FBQTtFQWhHcUMsQ0FEekM7QUFBQSIsImZpbGUiOiJmZWF0dXJlcy9jaGFydHMvcmVnaW9uYWwvY2hhcnQuY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlICdhZWRlcydcbiAgLmNvbnRyb2xsZXIgJ0NoYXJ0UmVnaW9uYWxDb250cm9sbGVyJywgKCRzY29wZSwgQ2hhcnRTZXJ2aWNlLCBDaGFydHNTZXJ2aWNlLCBVdGlsc1NlcnZpY2UpIC0+XG4gICAgJ25nSW5qZWN0J1xuXG4gICAgdm0gPSB0aGlzXG4gICAgQ2hhcnQgPSBudWxsXG5cbiAgICBAbWV0aG9kcyA9ICRzY29wZS5tZXRob2RzID0ge31cblxuICAgICNUaGlzIGlzIHdoZXJlIG15IGRhdGEgbW9kZWwgd2lsbCBiZSBzdG9yZWQuXG4gICAgI1widmlzdWFsXCIgd2lsbCBjb250YWluIHRoZSBjaGFydCdzIGRhdGF0YWJsZSxcbiAgICAjXCJhY3RpdmF0ZUNoYXJ0XCIgZmxpcHMgdG8gdHJ1ZSBvbmNlIHRoZSBkYXRhIGZyb20gc2VydmVyIGlzIHJlYWR5XG4gICAgJHNjb3BlLmRhdGFNb2RlbCA9IHtcbiAgICAgIHZpc3VhbDoge31cbiAgICAgIG1ldGFEYXRhOiB7fVxuICAgICAgZGF0YToge31cbiAgICAgIG9wdGlvbnM6IHt9XG4gICAgfVxuXG4gICAgc2hvd0NoYXJ0ID0gLT5cbiAgICAgICRzY29wZS5sb2FkZXIgPSBmYWxzZVxuXG4gICAgaGlkZUNoYXJ0ID0gLT5cbiAgICAgICRzY29wZS5sb2FkZXIgPSB0cnVlXG5cbiAgICBzZXRDaGFydCA9IChjaGFydCkgLT5cbiAgICAgIENoYXJ0ID0gY2hhcnRcblxuICAgICRzY29wZS5tZXRob2RzLnNob3dSZWdpYW9DaGFydCA9IC0+XG4gICAgICAjVXBkYXRlIHRoZSBtb2RlbCB0byBhY3RpdmF0ZSB0aGUgY2hhcnQgb24gdGhlIERPTVxuICAgICAgI05vdGUgdGhlIHVzZSBvZiAkc2NvcGUuJGFwcGx5IHNpbmNlIHdlJ3JlIGluIHRoZVxuICAgICAgI0dvb2dsZSBMb2FkZXIgY2FsbGJhY2suXG4gICAgICBkbyBoaWRlQ2hhcnRcblxuICAgICAgQ2hhcnRzU2VydmljZS5nZXRQcmV2ZW5jb2VzUmVnaW9uYWlzKCkudGhlbihcbiAgICAgICAgKHJlc3BvbnNlKSAtPlxuICAgICAgICAgIG1hcHBlZFJvd3MgPSBVdGlsc1NlcnZpY2Uub2JqZWN0VG9BcnJheSByZXNwb25zZS5kYXRhXG5cbiAgICAgICAgICAkc2NvcGUubG9jYWxpZGFkZXMgPSByZXNwb25zZS5kYXRhXG5cbiAgICAgICAgICBEYXRhVGFibGUgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uRGF0YVRhYmxlKClcbiAgICAgICAgICBEYXRhVGFibGUuYWRkQ29sdW1uICdzdHJpbmcnLCAnU3RhdGVzJ1xuICAgICAgICAgIERhdGFUYWJsZS5hZGRDb2x1bW4gJ251bWJlcicsICdFbSBkaWFzJ1xuICAgICAgICAgIERhdGFUYWJsZS5hZGRDb2x1bW4gJ251bWJlcicsICdBdHJhc2FkYXMnXG4gICAgICAgICAgRGF0YVRhYmxlLmFkZFJvd3MgbWFwcGVkUm93c1xuXG4gICAgICAgICAgJHNjb3BlLmRhdGFNb2RlbC5kYXRhID0gRGF0YVRhYmxlXG4gICAgICAgICAgJHNjb3BlLmRhdGFNb2RlbC5zZXRDaGFydCA9IHNldENoYXJ0XG5cbiAgICAgICAgICAkc2NvcGUuZGF0YU1vZGVsLm9wdGlvbnMgPVxuICAgICAgICAgICAgJ3dpZHRoJzogNTAwXG4gICAgICAgICAgICAnaGVpZ2h0JzogMzAwXG4gICAgICAgICAgICByZWdpb246ICdCUidcbiAgICAgICAgICAgIHJlc29sdXRpb246ICdwcm92aW5jZXMnXG4gICAgICAgICAgICBkaXNwbGF5TW9kZTogJ3JlZ2lvbnMnXG4gICAgICAgICAgICBjb2xvckF4aXM6XG4gICAgICAgICAgICAgIGNvbG9yczogWydibHVlJywgJ3JlZCddXG5cbiAgICAgICAgICAkc2NvcGUucGVyY2VudENoYXJ0SGVhZGVyID0gXCJFc3RhZG9zIG1haXMgYWZldGFkb3NcIlxuXG4gICAgICAgICAgZG8gc2hvd0NoYXJ0XG5cbiAgICAgICAgKGVycm9yKSAtPlxuICAgICAgICAgIGNvbnNvbGUubG9nIGVycm9yXG4gICAgICApXG5cbiAgICAkc2NvcGUubWV0aG9kcy5zaG93Q2l0eUNoYXJ0ICAgPSAtPlxuICAgICAgI1VwZGF0ZSB0aGUgbW9kZWwgdG8gYWN0aXZhdGUgdGhlIGNoYXJ0IG9uIHRoZSBET01cbiAgICAgICNOb3RlIHRoZSB1c2Ugb2YgJHNjb3BlLiRhcHBseSBzaW5jZSB3ZSdyZSBpbiB0aGVcbiAgICAgICNHb29nbGUgTG9hZGVyIGNhbGxiYWNrLlxuICAgICAgZG8gaGlkZUNoYXJ0XG5cbiAgICAgIENoYXJ0c1NlcnZpY2UuZ2V0UHJldmVuY29lc0VtQ2lkYWRlcygpLnRoZW4oXG4gICAgICAgIChyZXNwb25zZSkgLT5cbiAgICAgICAgICBoZWFkZXIgICAgID0gbmV3IEFycmF5KFsnQ2l0eScsICdFbSBkaWEnLCAnQXRyYXNhZGEnXSlcbiAgICAgICAgICBtYXBwZWRSb3dzID0gVXRpbHNTZXJ2aWNlLm9iamVjdFRvQXJyYXkgcmVzcG9uc2UuZGF0YVxuICAgICAgICAgIG1hcHBlZFJvd3MgPSBfLnVuaW9uIGhlYWRlciwgbWFwcGVkUm93c1xuXG4gICAgICAgICAgJHNjb3BlLmxvY2FsaWRhZGVzID0gcmVzcG9uc2UuZGF0YVxuICAgICAgICAgICRzY29wZS5kYXRhTW9kZWwuZGF0YSA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5hcnJheVRvRGF0YVRhYmxlKG1hcHBlZFJvd3MpXG5cbiAgICAgICAgICAkc2NvcGUuZGF0YU1vZGVsLm9wdGlvbnMgPVxuICAgICAgICAgICAgc2l6ZUF4aXM6IHttaW5WYWx1ZTogMCwgbWF4VmFsdWU6IDEwMH1cbiAgICAgICAgICAgIHJlZ2lvbjogJ0JSJ1xuICAgICAgICAgICAgZGlzcGxheU1vZGU6ICdtYXJrZXJzJ1xuICAgICAgICAgICAgY29sb3JBeGlzOiB7Y29sb3JzOiBbJ2JsdWUnLCAncmVkJ119XG4gICAgICAgICAgICAnd2lkdGgnOiA1MDBcbiAgICAgICAgICAgICdoZWlnaHQnOiAzMDBcblxuICAgICAgICAgICRzY29wZS5wZXJjZW50Q2hhcnRIZWFkZXIgPSBcIkNpZGFkZXMgbWFpcyBhZmV0YWRhc1wiXG5cbiAgICAgICAgICBkbyBzaG93Q2hhcnRcblxuICAgICAgICAoZXJyb3IpIC0+XG4gICAgICAgICAgY29uc29sZS5sb2cgZXJyb3JcbiAgICAgIClcblxuICAgIGRvICRzY29wZS5tZXRob2RzLnNob3dSZWdpYW9DaGFydFxuXG4gICAgcmV0dXJuXG4iXX0=